<?xml version="1.0"?>
<launch>

  <!-- GDB functionality -->
  <arg name="robot_model" default="aubo_i5"/>
  <arg name="debug" default="false" doc="If set to true, will start the driver inside gdb" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <arg     if="$(arg debug)" name="launch_prefix" value="xterm -e gdb -ex run --args" />

  <arg name="use_tool_communication" doc="On e-Series robots tool communication can be enabled with this argument"/>
  <arg name="controller_config_file" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="robot_ip" doc="IP address by which the robot can be reached."/>
  <arg name="kinematics_config" default="$(find aubo_moveit_config)/config/default_kinematics.yaml" doc="Kinematics config file used for calibration correction. This will be used to verify the robot's calibration is matching the robot_description. Pass the same config file that is passed to the robot_description."/>
  <arg name="tf_prefix" default="" doc="tf_prefix used for the robot."/>
  <arg name="controllers" default="joint_state_controller pos_joint_traj_controller"/>
  <arg name="stopped_controllers" default="joint_group_vel_controller forward_joint_traj_controller forward_cartesian_traj_controller"/>
  <arg name="tool_voltage" default="0" doc="Tool voltage set at the beginning of the UR program. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_parity" default="0" doc="Parity configuration used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_baud_rate" default="115200" doc="Baud rate used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_stop_bits" default="1" doc="Number of stop bits used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_rx_idle_chars" default="1.5" doc="Number of idle chars in RX channel used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_tx_idle_chars" default="3.5" doc="Number of idle chars in TX channel used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_device_name" default="/tmp/ttyUR" doc="Local device name used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_tcp_port" default="54321" doc="Port on which the robot controller publishes the tool comm interface. Only used, when `use_tool_communication` is set to true."/>
  <arg name="headless_mode" default="false" doc="Automatically send URScript to robot to execute. On e-Series this does require the robot to be in 'remote-control' mode. With this, the URCap is not needed on the robot."/>
  <arg name="servoj_gain" default="2000" doc="Specify gain for servoing to position in joint space. A higher gain can sharpen the trajectory."/>
  <arg name="servoj_lookahead_time" default="0.03" doc="Specify lookahead time for servoing to position in joint space. A longer lookahead time can smooth the trajectory."/>
  <arg name="aubo_hardware_interface_node_required" default="false" doc="Shut down ros environment if aubo_hardware_interface-node dies."/>
  <!-- Load hardware interface -->
  <node name="aubo_hardware_interface" pkg="aubo_robot_driver" type="aubo_robot_driver_node" output="screen" launch-prefix="$(arg launch_prefix)" required="$(arg aubo_hardware_interface_node_required)">
    <param name="robot_ip" type="str" value="$(arg robot_ip)"/>
    <rosparam command="load" file="$(arg kinematics_config)" />
    <param name="headless_mode" value="$(arg headless_mode)"/>
    <param name="tf_prefix" value="$(arg tf_prefix)"/>
    <param name="use_tool_communication" value="$(arg use_tool_communication)"/>
    <param name="tool_voltage" value="$(arg tool_voltage)"/>
    <param name="tool_parity" value="$(arg tool_parity)"/>
    <param name="tool_baud_rate" value="$(arg tool_baud_rate)"/>
    <param name="tool_stop_bits" value="$(arg tool_stop_bits)"/>
  </node>

  <!-- Load controller settings -->
  <rosparam file="$(arg controller_config_file)" command="load"/>

  <!-- spawn controller manager -->
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" args="$(arg controllers)"/>



 

</launch>
