# Settings for ros_control control loop
hardware_control_loop:
   loop_hz: &loop_hz 50

# Settings for ros_control hardware interface
aubo_hardware_interface:
   control_period: 0.01
   joints: &robot_joints
     - shoulder_joint
     - upperArm_joint
     - foreArm_joint
     - wrist1_joint
     - wrist2_joint
     - wrist3_joint

# Publish all joint states ----------------------------------
joint_state_controller:
   type:         joint_state_controller/JointStateController
   publish_rate: 50
# Publish wrench ----------------------------------
#force_torque_sensor_controller:
#   type:         force_torque_sensor_controller/ForceTorqueSensorController
#   publish_rate: *loop_hz

# Publish speed_scaling factor
#speed_scaling_state_controller:
#   type:         scaled_controllers/SpeedScalingStateController
#   publish_rate: *loop_hz

# Joint Trajectory Controller - position based -------------------------------
# For detailed explanations of parameter see http://wiki.ros.org/joint_trajectory_controller
#scaled_pos_joint_traj_controller:
#   type: position_controllers/ScaledJointTrajectoryController
#   joints: *robot_joints
#   constraints:
#      goal_time: 0.6
#      stopped_velocity_tolerance: 0.05
#      shoulder_joint: {trajectory: 0.2, goal: 0.1}
#      upperArm_joint: {trajectory: 0.2, goal: 0.1}
#      foreArm_joint: {trajectory: 0.2, goal: 0.1}
#      wrist1_joint: {trajectory: 0.2, goal: 0.1}
#      wrist2_joint: {trajectory: 0.2, goal: 0.1}
#      wrist3_joint: {trajectory: 0.2, goal: 0.1}
#   stop_trajectory_duration: 0.5
#   state_publish_rate: *loop_hz
#   action_monitor_rate: 20

pos_joint_traj_controller:
   type: position_controllers/JointTrajectoryController
   joints: *robot_joints
   constraints:
      goal_time: 0.6
      stopped_velocity_tolerance: 0
      shoulder_joint: {trajectory: 0.5, goal: 0.6}
      upperArm_joint: {trajectory: 0.5, goal: 0.6}
      foreArm_joint: {trajectory: 0.5, goal: 0.6}
      wrist1_joint: {trajectory: 0.5, goal: 0.6}
      wrist2_joint: {trajectory: 0.5, goal: 0.6}
      wrist3_joint: {trajectory: 0.5, goal: 0.6}
   stop_trajectory_duration: 0.5
   state_publish_rate: 50
   action_monitor_rate: 10

#scaled_vel_joint_traj_controller:
#   type: velocity_controllers/ScaledJointTrajectoryController
#   joints: *robot_joints
#   constraints:
#      goal_time: 0.6
#      stopped_velocity_tolerance: 0.05
#      shoulder_joint: {trajectory: 0.1, goal: 0.1}
#      upperArm_joint: {trajectory: 0.1, goal: 0.1}
#      foreArm_joint: {trajectory: 0.1, goal: 0.1}
#      wrist1_joint: {trajectory: 0.1, goal: 0.1}
#      wrist2_joint: {trajectory: 0.1, goal: 0.1}
#      wrist3_joint: {trajectory: 0.1, goal: 0.1}
#   gains:
#      #!!These values have not been optimized!!
#      shoulder_joint:  {p: 5.0,  i: 0.05, d: 0.1, i_clamp: 1}
#      upperArm_joint: {p: 5.0,  i: 0.05, d: 0.1, i_clamp: 1}
#      foreArm_joint:         {p: 5.0,  i: 0.05, d: 0.1, i_clamp: 1}
#      wrist1_joint:       {p: 5.0,  i: 0.05, d: 0.1, i_clamp: 1}
#      wrist2_joint:       {p: 5.0,  i: 0.05, d: 0.1, i_clamp: 1}
#      wrist3_joint:       {p: 5.0,  i: 0.05, d: 0.1, i_clamp: 1}
#   # Use a feedforward term to reduce the size of PID gains
#   velocity_ff:
#      shoulder_joint: 1.0
#      upperArm_joint: 1.0
#      foreArm_joint: 1.0
#      wrist1_joint: 1.0
#      wrist2_joint: 1.0
#      wrist3_joint: 1.0
#   stop_trajectory_duration: 0.5
#   state_publish_rate: *loop_hz
#   action_monitor_rate: 20

#vel_joint_traj_controller:
#   type: velocity_controllers/JointTrajectoryController
#   joints: *robot_joints
#   constraints:
#      goal_time: 0.6
#      stopped_velocity_tolerance: 0.05
#      shoulder_joint: {trajectory: 0.1, goal: 0.1}
#      upperArm_joint: {trajectory: 0.1, goal: 0.1}
#      foreArm_joint: {trajectory: 0.1, goal: 0.1}
#      wrist1_joint: {trajectory: 0.1, goal: 0.1}
#      wrist2_joint: {trajectory: 0.1, goal: 0.1}
#      wrist3_joint: {trajectory: 0.1, goal: 0.1}
#   gains:
#      #!!These values have not been optimized!!
#      shoulder_joint:  {p: 5.0,  i: 0.05, d: 0.1, i_clamp: 1}
#      upperArm_joint: {p: 5.0,  i: 0.05, d: 0.1, i_clamp: 1}
#      foreArm_joint:         {p: 5.0,  i: 0.05, d: 0.1, i_clamp: 1}
#      wrist1_joint:       {p: 5.0,  i: 0.05, d: 0.1, i_clamp: 1}
#      wrist2_joint:       {p: 5.0,  i: 0.05, d: 0.1, i_clamp: 1}
#      wrist3_joint:       {p: 5.0,  i: 0.05, d: 0.1, i_clamp: 1}
#   # Use a feedforward term to reduce the size of PID gains
#   velocity_ff:
#      shoulder_joint: 1.0
#      upperArm_joint: 1.0
#      foreArm_joint: 1.0
#      wrist1_joint: 1.0
#      wrist2_joint: 1.0
#      wrist3_joint: 1.0
#   stop_trajectory_duration: 0.5
#   state_publish_rate: *loop_hz
#   action_monitor_rate: 20

## Pass an array of joint velocities directly to the joints
#joint_group_vel_controller:
#   type: velocity_controllers/JointGroupVelocityController
#   joints: *robot_joints

#forward_joint_traj_controller:
#    type: "pass_through_controllers/JointTrajectoryController"
#    joints: *robot_joints

#forward_cartesian_traj_controller:
#    type: "pass_through_controllers/CartesianTrajectoryController"
#    joints: *robot_joints

#twist_controller:
#  type: "ros_controllers_cartesian/TwistController"
#  frame_id: "ee_link"
#  publish_rate: *loop_hz
#  joints: *robot_joints

#pose_based_cartesian_traj_controller:
#    type: pose_controllers/CartesianTrajectoryController

#    # UR driver convention
#    base: base_link
#    tip: ee_link
#    joints: *robot_joints

#joint_based_cartesian_traj_controller:
#    type: position_controllers/CartesianTrajectoryController

#    # UR driver convention
#    base: base_link
#    tip: ee_link
#    joints: *robot_joints

#robot_status_controller:
#   type: industrial_robot_status_controller/IndustrialRobotStatusController
#   handle_name: industrial_robot_status_handle
#   publish_rate: 10
